# Flask Application Guidelines

## 1. Project Structure

- Use a modular project structure with clear separation of concerns
- Follow the application factory pattern
- Entry point is `run.py` with factory in `project_root/app/factory.py`
- Organize code into blueprints for scalability and maintainability
- Use environment variables for configuration (stored in `.env`)

### Recommended Directory Layout

project_root/
├── app/ # Main application package
│ ├── templates/ # Jinja2 templates
│ ├── static/ # Static files (CSS, JS, images)
│ │ ├── css/
│ │ ├── js/
│ │ └── img/
│ ├── helpers/ # Helper functions and utilities
│ ├── routes/ # Blueprint routes
│ ├── routes/api/v1/ # API routes
│ ├── models.py # SQLAlchemy models
│ ├── factory.py # App factory
├── migrations/ # Database migrations
├── tests/ # Test suite
├── docs/ # Documentation
├── .env # Environment variables
├── .env.example # Example environment variables
├── .gitignore # Git ignore rules
├── .pre-commit-config.yaml # Pre-commit hooks
├── readme.md # Project documentation
├── pyproject.toml # Project configuration
├── Dockerfile # Docker configuration
├── docker-compose.yml # Docker compose configuration
├── config.py # Project configuration
├── requirements.txt # Project dependencies
└── run.py # Application entry point

## 2. Code Organization

- Use blueprints for feature-based code organization
- routes that don't return a page or reroute the user should be in the api/v1/ folder and use flask_restx to define the routes
- routes that return a page should be in the routes/ folder and use flask_login to define the routes
- Implement clear configuration management
- Follow PEP 8 style guidelines

## 3. Security Best Practices

- Store secrets in environment variables
- Use secure password hashing
- Implement proper session management
- Sanitize all user inputs

## 4. Database Guidelines

- Use SQLAlchemy for database operations
- Implement database migrations
- Follow proper session management
- Use appropriate indexing strategies

## 5. Testing Requirements

- Write unit tests for all features
- Maintain separate test configurations
- Use pytest as testing framework
- Aim for high test coverage

## 6. Deployment Considerations

- Use production-grade WSGI server
- Implement proper logging
- Configure error handling
- Set up monitoring
- Use SSL/TLS in production

## 7. Documentation

- Document API endpoints
- Maintain requirements.txt
- Include setup instructions
- Document configuration options

## 8. Frontend-backend communication

- Use cookies for authentication
- Use CSRF tokens for security
- Use JWT for authentication
- When the frontend needs to make a request to the backend, it should use the makeAuthenticatedRequest function in the utils.js file.
- The makeAuthenticatedRequest function will add the access token to the request headers and include the CSRF token in the request headers if the request is not a GET request.
- The makeAuthenticatedRequest function will include the cookies in the request if the request is not a GET request.

## 9. Python No Deprecated Features

- Our Python code should avoid using deprecated features and adhere to the latest Python standards.

## 10. Python Type Standards

- Avoid using 'Dict', 'Any', and 'Union'. Use more specific types and Pydantic for type validation.
