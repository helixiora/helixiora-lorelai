window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "indexer", "modulename": "indexer", "kind": "module", "doc": "<p>Crawl the Google Drive and index the documents.</p>\n\n<p>It processes the documents using Pinecone and OpenAI API through langchain</p>\n"}, {"fullname": "indexer.main", "modulename": "indexer", "qualname": "main", "kind": "function", "doc": "<p>Implement the main function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli", "modulename": "lorelaicli", "kind": "module", "doc": "<p>Query indexed documents in Pinecone using LangChain and OpenAI in the CLI</p>\n"}, {"fullname": "lorelaicli.main", "modulename": "lorelaicli", "qualname": "main", "kind": "function", "doc": "<p>Retrieve the context, ask a question, and display the results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli.setup_arg_parser", "modulename": "lorelaicli", "qualname": "setup_arg_parser", "kind": "function", "doc": "<p>Set up argument parser for command-line options.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli.get_organisation", "modulename": "lorelaicli", "qualname": "get_organisation", "kind": "function", "doc": "<p>Retrieve or select an organisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">org_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli.select_organisation", "modulename": "lorelaicli", "qualname": "select_organisation", "kind": "function", "doc": "<p>Interactively select an organisation from a list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli.get_user_from_organisation", "modulename": "lorelaicli", "qualname": "get_user_from_organisation", "kind": "function", "doc": "<p>Retrieve or select a user from a specific organisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">org_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">user_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli.select_user_from_organisation", "modulename": "lorelaicli", "qualname": "select_user_from_organisation", "kind": "function", "doc": "<p>Interactively select a user from a list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">org_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelaicli.display_results", "modulename": "lorelaicli", "qualname": "display_results", "kind": "function", "doc": "<p>Display the results in a formatted manner.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">answer</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "run", "modulename": "run", "kind": "module", "doc": "<p>the main application file for the OAuth2 flow flask app</p>\n"}, {"fullname": "run.app", "modulename": "run", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Flask &#x27;run&#x27;&gt;"}, {"fullname": "run.secrets", "modulename": "run", "qualname": "secrets", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;project_id&#x27;: &#x27;lorelai-417214&#x27;, &#x27;redirect_uris&#x27;: [&#x27;http://127.0.0.1:5000/oauth2callback&#x27;, &#x27;http://localhost:5000/oauth2callback&#x27;, &#x27;https://lorelai.helixiora.com&#x27;], &#x27;client_id&#x27;: &#x27;865731000695-esnkde2kpng05ihli74368lg2i36ovdb.apps.googleusercontent.com&#x27;, &#x27;auth_uri&#x27;: &#x27;https://accounts.google.com/o/oauth2/auth&#x27;, &#x27;client_secret&#x27;: &#x27;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&#x27;, &#x27;token_uri&#x27;: &#x27;https://oauth2.googleapis.com/token&#x27;, &#x27;auth_provider_x509_cert_url&#x27;: &#x27;https://www.googleapis.com/oauth2/v1/certs&#x27;}"}, {"fullname": "run.e_creds", "modulename": "run", "qualname": "e_creds", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;client_id&#x27;, &#x27;project_id&#x27;, &#x27;client_secret&#x27;, &#x27;redirect_uris&#x27;]"}, {"fullname": "run.client_config", "modulename": "run", "qualname": "client_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;web&#x27;: {&#x27;client_id&#x27;: &#x27;865731000695-esnkde2kpng05ihli74368lg2i36ovdb.apps.googleusercontent.com&#x27;, &#x27;project_id&#x27;: &#x27;lorelai-417214&#x27;, &#x27;auth_uri&#x27;: &#x27;https://accounts.google.com/o/oauth2/auth&#x27;, &#x27;token_uri&#x27;: &#x27;https://oauth2.googleapis.com/token&#x27;, &#x27;auth_provider_x509_cert_url&#x27;: &#x27;https://www.googleapis.com/oauth2/v1/certs&#x27;, &#x27;client_secret&#x27;: &#x27;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&#x27;, &#x27;redirect_uris&#x27;: [&#x27;http://127.0.0.1:5000/oauth2callback&#x27;, &#x27;http://localhost:5000/oauth2callback&#x27;, &#x27;https://lorelai.helixiora.com&#x27;]}}"}, {"fullname": "run.lorelaicreds", "modulename": "run", "qualname": "lorelaicreds", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;redirect_uri&#x27;: &#x27;http://127.0.0.1:5000/oauth2callback&#x27;, &#x27;environment_slug&#x27;: &#x27;lacho&#x27;, &#x27;environment&#x27;: &#x27;dev&#x27;}"}, {"fullname": "run.flow", "modulename": "run", "qualname": "flow", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;google_auth_oauthlib.flow.Flow object&gt;"}, {"fullname": "run.connection", "modulename": "run", "qualname": "connection", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;mysql.connector.connection_cext.CMySQLConnection object&gt;"}, {"fullname": "run.index", "modulename": "run", "qualname": "index", "kind": "function", "doc": "<p>the index page</p>\n\n<p>Returns:\n    string: the index page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "run.serve_js", "modulename": "run", "qualname": "serve_js", "kind": "function", "doc": "<p>the javascript endpoint</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">script_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "run.logout", "modulename": "run", "qualname": "logout", "kind": "function", "doc": "<p>the logout route</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "run.page_not_found", "modulename": "run", "qualname": "page_not_found", "kind": "function", "doc": "<p>the error handler for 404 errors</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "run.internal_server_error", "modulename": "run", "qualname": "internal_server_error", "kind": "function", "doc": "<p>the error handler for 500 errors</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tasks", "modulename": "tasks", "kind": "module", "doc": "<p>The rq jobs that are executed asynchronously.</p>\n"}, {"fullname": "tasks.execute_rag_llm", "modulename": "tasks", "qualname": "execute_rag_llm", "kind": "function", "doc": "<p>An rq job to execute the RAG+LLM model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chat_message</span>, </span><span class=\"param\"><span class=\"n\">user</span>, </span><span class=\"param\"><span class=\"n\">organisation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tasks.run_indexer", "modulename": "tasks", "qualname": "run_indexer", "kind": "function", "doc": "<p>Run the indexer job to index the Google Drive documents in Pinecone.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">org_row</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">user_rows</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lorelai", "modulename": "lorelai", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "lorelai.contextretriever", "modulename": "lorelai.contextretriever", "kind": "module", "doc": "<p>This module contains the ContextRetriever class, which is responsible for retrieving context\nfor a given question from Pinecone.</p>\n\n<p>The ContextRetriever class manages the\nintegration with Pinecone and OpenAI services, facilitating the retrieval of relevant document\ncontexts for specified questions. It leverages Pinecone's vector search capabilities alongside\nOpenAI's embeddings and language models to generate responses based on the retrieved contexts.</p>\n"}, {"fullname": "lorelai.contextretriever.ContextRetriever", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever", "kind": "class", "doc": "<p>A class to retrieve context for a given question from Pinecone.</p>\n\n<p>This class manages the integration with Pinecone and OpenAI services,\nfacilitating the retrieval of relevant document contexts for specified questions.\nIt leverages Pinecone's vector search capabilities alongside OpenAI's embeddings and\nlanguage models to generate responses based on the retrieved contexts.</p>\n"}, {"fullname": "lorelai.contextretriever.ContextRetriever.__init__", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.__init__", "kind": "function", "doc": "<p>Initializes the ContextRetriever instance.</p>\n\n<p>Parameters:\n    org_name (str): The organization name, used for Pinecone index naming.\n    user (str): The user name, potentially used for logging or customization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">org_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "lorelai.contextretriever.ContextRetriever.pinecone_creds", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.pinecone_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.contextretriever.ContextRetriever.openai_creds", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.openai_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.contextretriever.ContextRetriever.lorelai_creds", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.lorelai_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.contextretriever.ContextRetriever.org_name", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.org_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "lorelai.contextretriever.ContextRetriever.user", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.user", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "lorelai.contextretriever.ContextRetriever.retrieve_context", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.retrieve_context", "kind": "function", "doc": "<p>Retrieves context for a given question using Pinecone and OpenAI.</p>\n\n<p>Parameters:\n    question (str): The question for which context is being retrieved.</p>\n\n<p>Returns:\n    tuple: A tuple containing the retrieval result and a list of sources for the context.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">question</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.contextretriever.ContextRetriever.get_all_indexes", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.get_all_indexes", "kind": "function", "doc": "<p>Retrieves all indexes in Pinecone along with their metadata.</p>\n\n<p>Returns:\n    list: A list of dictionaries containing the metadata for each index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pinecone</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">index_list</span><span class=\"o\">.</span><span class=\"n\">IndexList</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.contextretriever.ContextRetriever.get_index_details", "modulename": "lorelai.contextretriever", "qualname": "ContextRetriever.get_index_details", "kind": "function", "doc": "<p>Retrieves details for a specified index in Pinecone.</p>\n\n<p>Parameters:\n    index_host (str): The host of the index for which to retrieve details.</p>\n\n<p>Returns:\n    List[Dict[str, Any]]: A list of dictionaries, each containing metadata for vectors\n    in the specified index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.indexer", "modulename": "lorelai.indexer", "kind": "module", "doc": "<p>this file creates a class to process google drive documents using the google drive api, chunk\nthem using langchain and then index them in pinecone</p>\n"}, {"fullname": "lorelai.indexer.SCOPES", "modulename": "lorelai.indexer", "qualname": "SCOPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;https://www.googleapis.com/auth/drive.metadata.readonly&#x27;]"}, {"fullname": "lorelai.indexer.DATABASE", "modulename": "lorelai.indexer", "qualname": "DATABASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;./userdb.sqlite&#x27;"}, {"fullname": "lorelai.indexer.Indexer", "modulename": "lorelai.indexer", "qualname": "Indexer", "kind": "class", "doc": "<p>Used to process the Google Drive documents and index them in Pinecone.</p>\n"}, {"fullname": "lorelai.indexer.Indexer.google_creds", "modulename": "lorelai.indexer", "qualname": "Indexer.google_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.indexer.Indexer.pinecone_creds", "modulename": "lorelai.indexer", "qualname": "Indexer.pinecone_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.indexer.Indexer.settings", "modulename": "lorelai.indexer", "qualname": "Indexer.settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.indexer.Indexer.index_org_drive", "modulename": "lorelai.indexer", "qualname": "Indexer.index_org_drive", "kind": "function", "doc": "<p>Process the Google Drive documents for an organisation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>org</strong>:  the organisation to process, a list of org details (org_id, name)</li>\n<li><strong>users</strong>:  the users to process, a list of user details (user_id, name, email, token,\nrefresh_token)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">org</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.indexer.Indexer.index_user_drive", "modulename": "lorelai.indexer", "qualname": "Indexer.index_user_drive", "kind": "function", "doc": "<p>Process the Google Drive documents for a user and index them in Pinecone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user</strong>:  the user to process, a list of user details (user_id, name, email, token,\nrefresh_token)</li>\n<li><strong>org</strong>:  the organisation to process, a list of org details (org_id, name)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">org</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.indexer.Indexer.get_google_docs_ids", "modulename": "lorelai.indexer", "qualname": "Indexer.get_google_docs_ids", "kind": "function", "doc": "<p>Retrieve all Google Docs document IDs from the user's Google Drive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>credentials</strong>:  Google-auth credentials object for the user</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of document IDs</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">credentials</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.llm", "modulename": "lorelai.llm", "kind": "module", "doc": "<p>a class that takes a question and context and sends it to the LLM, then returns the answer</p>\n"}, {"fullname": "lorelai.llm.Llm", "modulename": "lorelai.llm", "qualname": "Llm", "kind": "class", "doc": "<p>A class to interact with the OpenAI llm for answering questions based on context</p>\n"}, {"fullname": "lorelai.llm.Llm.__init__", "modulename": "lorelai.llm", "qualname": "Llm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">&#39;gpt-3.5-turbo&#39;</span></span>)</span>"}, {"fullname": "lorelai.llm.Llm.openai_creds", "modulename": "lorelai.llm", "qualname": "Llm.openai_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.llm.Llm.model", "modulename": "lorelai.llm", "qualname": "Llm.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.llm.Llm.get_answer", "modulename": "lorelai.llm", "qualname": "Llm.get_answer", "kind": "function", "doc": "<p>Get the answer to a question based on the provided context using the OpenAI language\nmodel.</p>\n\n<p>parameters:\n    question (str): The question to be answered.\n    context (str): The context in which the question is asked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">question</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lorelai.llm.Llm.get_llm_status", "modulename": "lorelai.llm", "qualname": "Llm.get_llm_status", "kind": "function", "doc": "<p>Get the status of the LLM model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lorelai.processor", "modulename": "lorelai.processor", "kind": "module", "doc": "<p>Contains the Processor class that processes and indexes them in Pinecone.</p>\n"}, {"fullname": "lorelai.processor.Processor", "modulename": "lorelai.processor", "qualname": "Processor", "kind": "class", "doc": "<p>This class is used to process the Google Drive documents and index them in Pinecone.</p>\n"}, {"fullname": "lorelai.processor.Processor.__init__", "modulename": "lorelai.processor", "qualname": "Processor.__init__", "kind": "function", "doc": "<p>Initialize the Processor class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "lorelai.processor.Processor.pinecone_creds", "modulename": "lorelai.processor", "qualname": "Processor.pinecone_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.processor.Processor.openai_creds", "modulename": "lorelai.processor", "qualname": "Processor.openai_creds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.processor.Processor.lorelai_settings", "modulename": "lorelai.processor", "qualname": "Processor.lorelai_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.processor.Processor.pinecone_api_key", "modulename": "lorelai.processor", "qualname": "Processor.pinecone_api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.processor.Processor.openai_api_key", "modulename": "lorelai.processor", "qualname": "Processor.openai_api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "lorelai.processor.Processor.pinecone_filter_deduplicate_documents_list", "modulename": "lorelai.processor", "qualname": "Processor.pinecone_filter_deduplicate_documents_list", "kind": "function", "doc": "<p>Process the vectors and removes vector which exist in database.</p>\n\n<p>Also tag doc metadata with new user</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>documents</strong>:  the documents to process</li>\n<li><strong>pc_index</strong>:  pinecone index object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ol>\n  <li>(list of documents deduplicated and filtered , ready to be inserted in pinecone)\n  <ol start=\"2\">\n  <li>(number of documents updated)</li>\n  </ol></li>\n  </ol>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">documents</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pc_index</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.processor.Processor.pinecone_format_vectors", "modulename": "lorelai.processor", "qualname": "Processor.pinecone_format_vectors", "kind": "function", "doc": "<p>process the documents and format them for pinecone insert.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>docs</strong>:  the documents to process</li>\n<li><strong>embeddings_model</strong>:  embeddings_model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of documents ready to be inserted in pinecone</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">documents</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">embeddings_model</span><span class=\"p\">:</span> <span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">embeddings</span><span class=\"o\">.</span><span class=\"n\">embeddings</span><span class=\"o\">.</span><span class=\"n\">Embeddings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.processor.Processor.store_docs_in_pinecone", "modulename": "lorelai.processor", "qualname": "Processor.store_docs_in_pinecone", "kind": "function", "doc": "<p>process the documents and index them in Pinecone</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>docs</strong>:  the documents to process</li>\n<li><strong>organisation</strong>:  the organisation to process</li>\n<li><strong>datasource</strong>:  the datasource to process</li>\n<li><strong>user</strong>:  the user to process</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">docs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">index_name</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.processor.Processor.google_docs_to_pinecone_docs", "modulename": "lorelai.processor", "qualname": "Processor.google_docs_to_pinecone_docs", "kind": "function", "doc": "<p>Process the Google Drive documents and divide them into pinecone compatible chunks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>document_id</strong>:  the document to process</li>\n<li><strong>credentials</strong>:  the credentials to use to process the document</li>\n<li><strong>org</strong>:  the organisation to process</li>\n<li><strong>user</strong>:  the user to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">document_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">credentials</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">oauth2</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">Credentials</span>,</span><span class=\"param\">\t<span class=\"n\">org_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils", "modulename": "lorelai.utils", "kind": "module", "doc": "<p>This module contains utility functions for the Lorelai package.</p>\n"}, {"fullname": "lorelai.utils.pinecone_index_name", "modulename": "lorelai.utils", "qualname": "pinecone_index_name", "kind": "function", "doc": "<p>Return the pinecone index name for the org.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">org</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">datasource</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dev&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">env_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lorelai&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;v1&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.get_creds_from_os", "modulename": "lorelai.utils", "qualname": "get_creds_from_os", "kind": "function", "doc": "<p>Load credentials from OS env vars.</p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<p>service (str): The name of the service (e.g 'openai', 'pinecone')\n    for which to load</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>dict: A dictionary containing the creds for the specified service.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">service</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.load_config", "modulename": "lorelai.utils", "qualname": "load_config", "kind": "function", "doc": "<p>Load credentials for a specified service from settings.json.</p>\n\n<p>If file is non-existant or has syntax errors will try to pull from\nOS env vars.</p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<pre><code>service (str): The name of the service (e.g 'openai', 'pinecone')\nfor which to load credentials.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>dict: A dictionary containing the creds for the specified service.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">service</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.mysql_connect", "modulename": "lorelai.utils", "qualname": "mysql_connect", "kind": "function", "doc": "<p>Get a database connection.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<pre><code>conn: a connection to the database\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.save_google_creds_to_tempfile", "modulename": "lorelai.utils", "qualname": "save_google_creds_to_tempfile", "kind": "function", "doc": "<p>load the google creds to a tempfile.\nThis is needed because the GoogleDriveLoader uses\nthe Credentials.from_authorized_user_file method to load the credentials</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>refresh_token</strong>:  the refresh token</li>\n<li><strong>token_uri</strong>:  the token uri</li>\n<li><strong>client_id</strong>:  the client id</li>\n<li><strong>client_secret</strong>:  the client secret</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">refresh_token</span>, </span><span class=\"param\"><span class=\"n\">token_uri</span>, </span><span class=\"param\"><span class=\"n\">client_id</span>, </span><span class=\"param\"><span class=\"n\">client_secret</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.get_embedding_dimension", "modulename": "lorelai.utils", "qualname": "get_embedding_dimension", "kind": "function", "doc": "<p>Returns the dimension of embeddings for a given model name.\nThis function currently uses a hardcoded mapping based on documentation,\nas there's no API endpoint to retrieve this programmatically.\nSee: <a href=\"https://platform.openai.com/docs/models/embeddings\">https://platform.openai.com/docs/models/embeddings</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_name</strong>:  The name of the model to retrieve the embedding dimension for.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.get_index_stats", "modulename": "lorelai.utils", "qualname": "get_index_stats", "kind": "function", "doc": "<p>Retrieve the details for a specified index in Pinecone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index_name</strong>:  the name of the index for which to retrieve details</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of dictionaries containing the metadata for the specified index</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pinecone</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">describe_index_stats_response</span><span class=\"o\">.</span><span class=\"n\">DescribeIndexStatsResponse</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "lorelai.utils.print_index_stats_diff", "modulename": "lorelai.utils", "qualname": "print_index_stats_diff", "kind": "function", "doc": "<p>prints the difference in the index statistics</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index_stats_before</span>, </span><span class=\"param\"><span class=\"n\">index_stats_after</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app", "modulename": "app", "kind": "module", "doc": "<p>Basic init in order to make this an explicit package.</p>\n"}, {"fullname": "app.tasks", "modulename": "app.tasks", "kind": "module", "doc": "<p>This module contains the tasks that are executed asynchronously.</p>\n"}, {"fullname": "app.tasks.execute_rag_llm", "modulename": "app.tasks", "qualname": "execute_rag_llm", "kind": "function", "doc": "<p>A task to execute the RAG+LLM model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chat_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">organisation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.tasks.run_indexer", "modulename": "app.tasks", "qualname": "run_indexer", "kind": "function", "doc": "<p>An rq job to run the indexer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.utils", "modulename": "app.utils", "kind": "module", "doc": "<p>Utility functions for the application.</p>\n"}, {"fullname": "app.utils.is_admin", "modulename": "app.utils", "qualname": "is_admin", "kind": "function", "doc": "<p>Check if the user is an admin.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">google_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.utils.get_db_connection", "modulename": "app.utils", "qualname": "get_db_connection", "kind": "function", "doc": "<p>Get a database connection.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<pre><code>conn: a connection to the database\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes", "modulename": "app.routes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.routes.admin", "modulename": "app.routes.admin", "kind": "module", "doc": "<p>This module contains the routes for the admin page.</p>\n"}, {"fullname": "app.routes.admin.admin_bp", "modulename": "app.routes.admin", "qualname": "admin_bp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Blueprint &#x27;admin&#x27;&gt;"}, {"fullname": "app.routes.admin.admin", "modulename": "app.routes.admin", "qualname": "admin", "kind": "function", "doc": "<p>The admin page.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.admin.job_status", "modulename": "app.routes.admin", "qualname": "job_status", "kind": "function", "doc": "<p>Return the status of a job given its job_id</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">job_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.admin.start_indexing", "modulename": "app.routes.admin", "qualname": "start_indexing", "kind": "function", "doc": "<p>Start indexing the data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.admin.list_indexes", "modulename": "app.routes.admin", "qualname": "list_indexes", "kind": "function", "doc": "<p>the list indexes page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.admin.index_details", "modulename": "app.routes.admin", "qualname": "index_details", "kind": "function", "doc": "<p>the index details page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.routes.auth", "modulename": "app.routes.auth", "kind": "module", "doc": "<p>Routes for user authentication.</p>\n"}, {"fullname": "app.routes.auth.auth_bp", "modulename": "app.routes.auth", "qualname": "auth_bp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Blueprint &#x27;auth&#x27;&gt;"}, {"fullname": "app.routes.auth.profile", "modulename": "app.routes.auth", "qualname": "profile", "kind": "function", "doc": "<p>the profile page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.auth.register", "modulename": "app.routes.auth", "qualname": "register", "kind": "function", "doc": "<p>Register a new user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.auth.oauth_callback", "modulename": "app.routes.auth", "qualname": "oauth_callback", "kind": "function", "doc": "<p>OAuth2 callback route.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.auth.login_user", "modulename": "app.routes.auth", "qualname": "login_user", "kind": "function", "doc": "<p>Log the user in by setting the session variables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">org_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">organisation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.routes.auth.UserInfo", "modulename": "app.routes.auth", "qualname": "UserInfo", "kind": "class", "doc": "<p>UserInfo(user_id, name, org_id, organisation)</p>\n", "bases": "builtins.tuple"}, {"fullname": "app.routes.auth.UserInfo.__init__", "modulename": "app.routes.auth", "qualname": "UserInfo.__init__", "kind": "function", "doc": "<p>Create new instance of UserInfo(user_id, name, org_id, organisation)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_id</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">org_id</span>, </span><span class=\"param\"><span class=\"n\">organisation</span></span>)</span>"}, {"fullname": "app.routes.auth.UserInfo.user_id", "modulename": "app.routes.auth", "qualname": "UserInfo.user_id", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "app.routes.auth.UserInfo.name", "modulename": "app.routes.auth", "qualname": "UserInfo.name", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "app.routes.auth.UserInfo.org_id", "modulename": "app.routes.auth", "qualname": "UserInfo.org_id", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "app.routes.auth.UserInfo.organisation", "modulename": "app.routes.auth", "qualname": "UserInfo.organisation", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n"}, {"fullname": "app.routes.auth.check_user_in_database", "modulename": "app.routes.auth", "qualname": "check_user_in_database", "kind": "function", "doc": "<p>Check if the user exists in the database.\"\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">UserInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.routes.auth.process_user", "modulename": "app.routes.auth", "qualname": "process_user", "kind": "function", "doc": "<p>Process the user information obtained from Google.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">organisation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">access_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expires_in</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">token_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.routes.chat", "modulename": "app.routes.chat", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.routes.chat.chat_bp", "modulename": "app.routes.chat", "qualname": "chat_bp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Blueprint &#x27;chat&#x27;&gt;"}, {"fullname": "app.routes.chat.chat", "modulename": "app.routes.chat", "qualname": "chat", "kind": "function", "doc": "<p>Endpoint to post chat messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.routes.chat.fetch_chat_result", "modulename": "app.routes.chat", "qualname": "fetch_chat_result", "kind": "function", "doc": "<p>Endpoint to fetch the result of a chat operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();